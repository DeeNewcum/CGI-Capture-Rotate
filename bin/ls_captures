#!/usr/bin/perl

=pod

=encoding UTF-8

=head1 NAME

ls_captures â€” List all CGI::Capture files located in a directory

=head1 SYNOPSIS

 $ ls_captures [directory]

If no directory is provided, it lists all capture files in the current directory.

 <TODO>

=head1 DESCRIPTION

Provides a summary of all CGI::Capture files in the specified directory, sorted
by most-recent last.

=head1 AUTHOR

Dee Newcum <deenewcum@cpan.org>

=head1 LICENSE

This library is free software; you may redistribute it and/or modify it under
the same terms as Perl itself.

=cut

use strict;
use warnings;

use CGI::Simple         ();
use Cwd                 ();     # core Perl since v5.000
use Data::Dumper;               # core Perl since v5.005
use File::stat          ();     # core Perl since v5.004
use Path::Tiny          ();
use Storable            ();     # core Perl since v5.7.3
use Term::ANSIColor     ();     # core Perl since v5.6.0
use Try::Tiny;

my $directory;
if (@ARGV) {
    $directory = shift;
    chdir($directory)
        or die "Couldn't chdir to '$directory': $!\n";
}

my $iter = Path::Tiny::path(".")->iterator( {
        recurse         => 0,
        follow_symlinks => 0,
    } );
my %file_ages;          # map $filename => $mtime_age
while (my $path = $iter->()) {
    my $file = $path->stringify;
    next unless (-f $file);
    $file_ages{$file} = -M $file;       # script start time minus file modification time, in days
}
my @file_sorted = sort {$file_ages{$b} <=> $file_ages{$a}} keys %file_ages;

my $colored = \&Term::ANSIColor::colored;
# don't color if STDOUT isn't connected to a TTY
if (!-t STDOUT) {
    $colored = sub {
        # don't color anything, just return the string unmodified
        if (ref($_[0]) eq 'ARRAY') {
            return $_[1];
        } else{
            return $_[0];
        }
    };
}

# TODO: Maybe use Curses.pm to provide a simple menu that allows the user to
# scroll up/down, while displaying a summary of each capture file in a panel at
# the bottom?
my $num_cgicaptures_found = 0;
foreach my $filename (@file_sorted) {
    my $storable;
    try {
        $storable = Storable::retrieve($filename);
    } catch {
        if (/^Magic number checking on storable file failed/
            || /^File is not a perl storable at /)
        {
            # this wasn't a Storable file, so just skip it
            $storable = undef;
        } else {
            die "$_\n";
        }
    };
    defined($storable) or next;
    # if it's a Storable file, but it doesn't contain CGI::Capture contents,
    # then also skip it
    ref($storable) eq 'CGI::Capture'    or next;
    $num_cgicaptures_found++;
    report_one_capture_file($filename, $storable);
}
if (!$num_cgicaptures_found) {
    print "No CGI::Capture files found.\n";
}


our %PERL5LIB_cache;        # maps $perl_path => $PERL5LIB

sub report_one_capture_file {
    my ($filename, $storable) = @_;

    my $time = scalar(localtime($storable->{CAPTURE_TIME}));

    my $uri = $storable->{ENV}{SCRIPT_URI};
    # we want to display the $PATH_INFO separately
    $uri =~ s/\Q$storable->{ENV}{PATH_INFO}\E$//
            if ($storable->{ENV}{PATH_INFO});

    # this is the specific command-line that the dev should use to apply()
    # this CGI::Capture file
    my $PERL_PATH = $storable->{PERL_PATH};
    if (!exists $PERL5LIB_cache{$PERL_PATH}) {
        $PERL5LIB_cache{$PERL_PATH} = get_CGICapture_PERL5LIB($storable);
    }
    my $debug_cmd = "$storable->{PERL_PATH} -d "
            . $PERL5LIB_cache{$PERL_PATH}
            . "-MCGI::Capture=" . Cwd::abs_path($filename)
            . " $storable->{PROGRAM_NAME}";
    if ($storable->{EFFECTIVE_USER_ID} != $>) {
        my $desired_username = getpwuid($storable->{EFFECTIVE_USER_ID});
        if ($desired_username) {
            $debug_cmd = "sudo -u $desired_username $debug_cmd";
        } else {
            $debug_cmd = "sudo -u $storable->{EFFECTIVE_USER_ID} $debug_cmd";
        }
    }

    # if the requester sent method=GET query-string parameters, then display
    # them in a user-friendly way
    my $params = '';
    if ($storable->{ENV}{QUERY_STRING}) {
        my $cgi = CGI::Simple->new($storable->{ENV}{QUERY_STRING});
        foreach my $param ($cgi->param) {
            my $will_add = '';
            $will_add .= ", "        if ($params);
            $will_add .= quotemeta($param);
            $will_add .= "='" . quotemeta($cgi->param($param)) . "'";
            # If a request has quite a few body_params, we should only
            # display the first N characters of them. Right now, we
            # hard-code the screen width, but
            # TODO: we should probably fetch the actual current screen width
            # https://stackoverflow.com/a/1782149/1042525
            if (length($params . $will_add) > 120) {
                $params .= ", ..."      unless ($params =~ /, \.\.\.$/);
                last;   # this latest parameter would push us over the limit
            }
            $params .= $will_add;
        }
    }

    # if the requester sent method=POST application/x-www-form-urlencoded
    # parameters, then display them in a user-friendly way
    if (${$storable->{STDIN}}) {
        my $cgi = CGI::Simple->new(${$storable->{STDIN}});
        foreach my $param ($cgi->param) {
            my $will_add = '';
            $will_add .= ", "        if ($params);
            $will_add .= quotemeta($param);
            $will_add .= "='" . quotemeta($cgi->param($param)) . "'";
            # If a request has quite a few body_params, we should only
            # display the first N characters of them. Right now, we
            # hard-code the screen width, but
            # TODO: we should probably fetch the actual current screen width
            # https://stackoverflow.com/a/1782149/1042525
            if (length($params . $will_add) > 120) {
                $params .= ", ..."      unless ($params =~ /, \.\.\.$/);
                last;   # this latest parameter would push us over the limit
            }
            $params .= $will_add;
        }
    }

    print "$time    ", $colored->($uri, 'red'),
          $colored->($storable->{ENV}{PATH_INFO} || '', 'magenta'), "\n";
    print "    ", $colored->($params, 'cyan'), "\n"     if ($params);
    print "    $debug_cmd\n";
    print "    ", $colored->($storable->{ENV}{REMOTE_ADDR}, 'green'),
          "    ", $colored->($storable->{ENV}{HTTP_USER_AGENT}, 'blue'), "\n";
}


# Unfortunately, there are situations where you need to set a specific $PERL5LIB
# before you can access CGI::Capture.
sub get_CGICapture_PERL5LIB {
    my ($storable) = @_;
    # check if CGI::Capture is available under a blank $PERL5LIB
    defined(my $pid = fork())
        or die "Couldn't fork: $!\n";
    if (!$pid) {
        # we're the child now
        open(STDERR, '>', '/dev/null');     # hide STDERR output
        delete $ENV{PERL5LIB};
        exec($storable->{PERL_PATH}, '-MCGI::Capture', '-e1');
        exit(3);
    }
    # We're the parent now. Wait for the child to exit.
    waitpid($pid, 0);
    if ($? >> 8 == 0) {
        # great, CGI::Capture is available under the default perl
        return '';
    }

    # okay, figure out where under @INC CGI/Capture.pm is located
    $pid = open(my $pipe, '-|');
    defined($pid) or die "Couldn't fork: $!\n";
    if (!$pid) {
        # we're the child now
        delete $ENV{PERL5LIB};
        my @cmd = ($storable->{PERL_PATH});
        foreach my $inc (@{$storable->{INC}}) {
            push(@cmd, "-I$inc");
        }
        push(@cmd, "-MCGI::Capture", '-eprint $INC{"CGI/Capture.pm"}');
        exec(@cmd);
        exit(1);
    }
    # We're the parent now. Read what the child printed on its STDOUT.
    my $inc = join("", <$pipe>);
    $inc =~ s#/+CGI/Capture\.pm$##;
    return "-I$inc ";
}
